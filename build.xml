<?xml version="1.0" encoding="UTF-8"?>

<project default="usage" xmlns:ivy="antlib:org.apache.ivy.ant">

    <target name="properties">

        <property file="project.properties" />

        <path id="thirdparty.jars">
            <pathelement location="lib/commons-lang3-${commons-lang3.version}.jar" />
            <pathelement location="lib/commons-cli-${commons-cli.version}.jar" />
            <pathelement location="lib/slf4j-api-${slf4j.version}.jar" />
            <!--
            <pathelement location="lib/slf4j-simple-${slf4j.version}.jar" />
            -->
            <pathelement location="lib/log4j-slf4j-impl-${log4j-slf4j.version}.jar" />
            <pathelement location="lib/javax.servlet-api-${javax.servlet-api.version}.jar" />
            <pathelement location="lib/log4j-core-${log4j.version}.jar" />
        </path>

        <fileset dir="lib" id="thirdparty.jarfiles">
            <include name="commons-lang3-${commons-lang3.version}.jar" />
            <include name="commons-cli-${commons-cli.version}.jar" />
            <include name="slf4j-api-${slf4j.version}.jar" />
            <!--
            <include name="slf4j-simple-${slf4j.version}.jar" />
            -->
            <include name="log4j-slf4j-impl-${log4j-slf4j.version}.jar" />
            <include name="log4j-core-${log4j.version}.jar" />
        </fileset>

        <path id="junit.jars">
            <pathelement location="lib/junit-${junit.version}.jar" />
            <pathelement location="lib/hamcrest-${hamcrest.version}.jar" />
        </path>

    </target>

    <target name="setup.ivy" depends="properties" >

        <!-- ivy (dependency manager) -->
        <!-- to (re)install ivy: cd ivy; ./install-ivy.sh -->
        <path id="ivy.lib.path">
            <fileset dir="tools/ivy" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>

    </target>

    <target name="setup.groovy" depends="fetchlibs, properties">
        <path id="groovy.lib.path">
            <fileset dir="lib" includes="groovy-${groovy.version}.jar"/>
            <fileset dir="lib" includes="groovy-ant-${groovy.version}.jar"/>
        </path>
        <taskdef name="groovy"
                 classname="org.codehaus.groovy.ant.Groovy"
                 classpathref="groovy.lib.path"
        />
    </target>

    <target name="hello.groovy" depends="setup.groovy">
        <groovy>
            System.out.println( "Hello? Groovy speaking here" );
        </groovy>
    </target>

    <target name="fetchlibs" depends="tools.install, setup.ivy">
        <ivy:retrieve />
    </target>

    <target name="compile" depends="fetchlibs">

        <mkdir dir="target/classes" />
        <javac
            srcdir="src/main/java"
            destdir="target/classes"
            debug="true"
            >
            <src path="src/main/java" />
            <classpath refid="thirdparty.jars" />
        </javac>
        <mkdir dir="target/test-classes" />
        <javac
            srcdir="src/test/java"
            destdir="target/test-classes"
            debug="true"
            >
            <src path="src/test/java" />
            <classpath refid="thirdparty.jars" />
            <classpath refid="junit.jars" />
            <classpath>
                <pathelement path="target/classes" />
            </classpath>
        </javac>
        <mkdir dir="target/integration-classes" />
        <javac
            srcdir="src/integration/java"
            destdir="target/integration-classes"
            debug="true"
            >
            <src path="src/integration/java" />
            <classpath refid="thirdparty.jars" />
            <classpath refid="junit.jars" />
            <classpath>
                <pathelement path="target/classes" />
            </classpath>
        </javac>
    </target>

    <target name="jar" depends="compile">
        <tstamp>
            <format property="touch.time" pattern="dd.MM.yyyy HH:mm:ss" />
        </tstamp>

        <jar
            jarfile="target/app-${app.version}.jar"
            basedir="target/classes"
            >
            <manifest>
                <attribute name="Create-Timestamp" value="${touch.time}" />
                <attribute name="Main-Class" value="com.infodesire.app.Main" />
                <attribute name="Class-Path"
                           value="commons-cli-${commons-cli.version}.jar commons-lang3-${commons-lang3.version}.jar slf4j-api-${slf4j.version}.jar slf4j-simple-${slf4j.version}.jar" />
            </manifest>
        </jar>
    </target>

    <target name="war" depends="jar">
        <war
            destfile="target/app.war"
            basedir="src/main/web"
            excludes="src/main/web/WEB-INF/web.xml"
            webxml="src/main/web/WEB-INF/web.xml"
            >
            <lib dir="target">
                <include name="app-${app.version}.jar" />
            </lib>
            <lib refid="thirdparty.jarfiles" />
        </war>
    </target>

    <target name="app">
        <property name="command" value="help" />
        <antcall target="main" />
    </target>

    <target name="main" depends="test-quietly">
        <java
            classpath="target/classes"
            classname="com.infodesire.app.Main"
            >
            <arg line="${command}" />
            <classpath refid="thirdparty.jars" />
        </java>
    </target>

    <target name="tools.install" depends="properties">

        <mkdir dir="tools/ivy" />
        <get
                src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.version}/ivy-${ivy.version}.jar"
                dest="tools/ivy"
                usetimestamp="true"
                skipexisting="true"
        />

    </target>

    <target name="test" depends="test.run">
        <groovy>
            import java.awt.Desktop;
            if (Desktop.isDesktopSupported()) {
            try {
            Desktop desktop = Desktop.getDesktop();
            File myFile = new File("target/test-report/report/junit-noframes.html");
            desktop.open(myFile);
            }
            catch (IOException ex) {
            ex.printStackTrace();
            }
            }
        </groovy>
        <fail if="failures" ></fail>
    </target>

    <target name="integration" depends="integration.run">
        <groovy>
            import java.awt.Desktop;
            if (Desktop.isDesktopSupported()) {
            try {
            Desktop desktop = Desktop.getDesktop();
            File myFile = new File("target/integration-report/report/junit-noframes.html");
            desktop.open(myFile);
            }
            catch (IOException ex) {
            ex.printStackTrace();
            }
            }
        </groovy>
        <fail if="failures" ></fail>
    </target>

    <target name="test-quietly" depends="test.run">
        <fail if="failures" ></fail>
    </target>


    <target name="test.run" depends="compile, setup.groovy">

        <mkdir dir="target/test-generated-files" />
        <junit
                fork="true"
                printsummary="on"
        >
            <!-- fork:true is necessary, because some tests use ant themselves -->

            <classpath>
                <fileset dir="lib" />
                <pathelement location="target/classes" />
                <pathelement location="target/test-classes" />
            </classpath>

            <batchtest
                failureproperty="failures"
                errorproperty="failures"
                todir="target/test-generated-files"
                >

                <fileset dir="target/test-classes" >
                    <include name="**/*Test.class" />
                </fileset>

            </batchtest>

            <formatter type="xml" />

        </junit>

        <mkdir dir="target/test-report" />
        <junitreport todir="target/test-report">
            <fileset dir="target/test-generated-files">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="noframes" todir="target/test-report/report"/>
        </junitreport>

    </target>

    <target name="integration.run" depends="compile, setup.groovy">

        <mkdir dir="target/integration-generated-files" />
        <junit
            fork="true"
            printsummary="on"
            >
            <!-- fork:true is necessary, because some tests use ant themselves -->

            <classpath>
                <fileset dir="lib" />
                <pathelement location="target/classes" />
                <pathelement location="target/integration-classes" />
            </classpath>

            <batchtest
                failureproperty="failures"
                errorproperty="failures"
                todir="target/integration-generated-files"
                >

                <fileset dir="target/integration-classes" >
                    <include name="**/*Test.class" />
                </fileset>

            </batchtest>

            <formatter type="xml" />

        </junit>

        <mkdir dir="target/integration-report" />
        <junitreport todir="target/integration-report">
            <fileset dir="target/integration-generated-files">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="noframes" todir="target/integration-report/report"/>
        </junitreport>

    </target>

    <target name="clean">
        <delete dir="target" />
    </target>

    <target name="clean.all" depends="clean">
        <delete dir="lib" />
        <delete dir="tools" />
    </target>

    <target name="web.build" depends="war, setup.groovy" >

        <unzip
            src="lib/tomcat-${tomcat.version}.zip"
            dest="target"
            />

        <chmod perm="+x">
            <fileset dir="target/apache-tomcat-9.0.68/bin/" >
                <include name="*" />
            </fileset>
        </chmod>

        <copy
            file="target/app.war"
            todir="target/apache-tomcat-9.0.68/webapps"
        />

    </target>

    <target name="web.start" depends="web.build" >
        <exec command="target/apache-tomcat-9.0.68/bin/catalina.sh start" />
        <groovy>
            import java.awt.Desktop;
            import java.net.URI;
            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                Desktop.getDesktop().browse( new URI( "http://localhost:8080/app" ) );
            }
        </groovy>
    </target>

    <target name="web.stop" depends="fetchlibs">
        <exec command="target/apache-tomcat-9.0.68/bin/catalina.sh stop" />
    </target>

    <target name="help" depends="usage" />

    <target name="usage">
        <echo>

Sample project using ant and ivy

ant tools.install ............. Install tools: ivy
ant hello.groovy .............. Test the groovy installation
ant test ...................... Run unit tests
ant integration ............... Run integration tests
ant clean ..................... Delete generated files
ant clean.all ................. Delete all generated or downloaded files

ant app ....................... Start app in terminal
ant web.start ................. Start app in tomcat
ant web.stop .................. Stop tomcat
ant web.build ................. Rebuild and redeploy app

        </echo>
    </target>

</project>